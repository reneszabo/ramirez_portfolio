<?php

namespace Main\EntityBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;
use JMS\Serializer\Annotation as JMS;

/**
 * InstagramSubscription
 * @ORM\Table(name="instagram_subscription")
 * @ORM\Entity
 * @ORM\HasLifecycleCallbacks()
 */
class InstagramSubscription {

  /**
   * @ORM\Column(name="id", type="integer")
   * @ORM\Id()
   * @ORM\GeneratedValue(strategy="AUTO")
   */
  private $id;

  /**
   * @ORM\Column(name="instagram_id", type="integer")
   */
  protected $instagramId;

  /**
   * @ORM\Column(name="object", type="string", nullable=false)
   */
  protected $object;

  /**
   * @ORM\Column(name="object_id", type="string", nullable=false)
   */
  protected $object_id;

  /**
   * @ORM\Column(name="aspect", type="string", nullable=false)
   */
  protected $aspect;

  /**
   * @ORM\Column(name="callback_url", type="string", nullable=false)
   */
  protected $callback_url;

  /**
   * @ORM\Column(name="type", type="string", nullable=false)
   */
  protected $type;

  /**
   * @ORM\Column(name="last_min_id", type="string", nullable=true)
   */
  protected $lastMinId;

  /**
   * @ORM\Column(name="is_active", type="boolean")
   */
  protected $isActive;

  /**
   * @ORM\ManyToOne(targetEntity="User") 
   * @ORM\JoinColumn(name="user_id", referencedColumnName="id")
   */
  protected $user;

  /**
   * @var \DateTime
   *
   * @ORM\Column(name="created_at", type="datetime", nullable=false)
   * @JMS\Exclude()
   */
  protected $createdAt;

  /**
   * @var \DateTime
   *
   * @ORM\Column(name="updated_at", type="datetime", nullable=true)
   * @JMS\Exclude()
   */
  protected $updatedAt;

  public function __toString() {
    return $this->getId();
  }

  /**
   * Constructor
   */
  public function __construct() {
    $this->isActive = false;
  }

  /**
   * @ORM\PrePersist()
   * 
   * Set createdAt
   *
   * @param \DateTime $createdAt
   * @return Tag
   */
  public function setCreatedAt($createdAt = null) {
    if (!($createdAt instanceof \DateTime) && !(is_string($createdAt)) && !(is_int($createdAt) || is_integer($createdAt))) {
      $createdAt = null;
    }
    $this->createdAt = null === $createdAt ? new \DateTime() : $createdAt;

    return $this;
  }

  /**
   * Get createdAt
   *
   * @return \DateTime 
   */
  public function getCreatedAt() {
    return $this->createdAt;
  }

  /**
   * @ORM\PrePersist()
   * @ORM\PreUpdate()
   * 
   * Set updatedAt
   *
   * @param \DateTime $updatedAt
   * @return Tag
   */
  public function setUpdatedAt($updatedAt = null) {
    if (!($updatedAt instanceof \DateTime) && !(is_string($updatedAt)) && !(is_int($updatedAt) || is_integer($updatedAt))) {
      $updatedAt = null;
    }
    $this->updatedAt = null === $updatedAt ? new \DateTime() : $updatedAt;

    return $this;
  }

  /**
   * Get updatedAt
   *
   * @return \DateTime 
   */
  public function getUpdatedAt() {
    return $this->updatedAt;
  }

  /**
   * Get id
   *
   * @return integer
   */
  public function getId() {
    return $this->id;
  }

  /**
   * Set instagramId
   *
   * @param integer $instagramId
   *
   * @return InstagramSubscription
   */
  public function setInstagramId($instagramId) {
    $this->instagramId = $instagramId;

    return $this;
  }

  /**
   * Get instagramId
   *
   * @return integer
   */
  public function getInstagramId() {
    return $this->instagramId;
  }

  /**
   * Set object
   *
   * @param string $object
   *
   * @return InstagramSubscription
   */
  public function setObject($object) {
    $this->object = $object;

    return $this;
  }

  /**
   * Get object
   *
   * @return string
   */
  public function getObject() {
    return $this->object;
  }

  /**
   * Set objectId
   *
   * @param string $objectId
   *
   * @return InstagramSubscription
   */
  public function setObjectId($objectId) {
    $this->object_id = $objectId;

    return $this;
  }

  /**
   * Get objectId
   *
   * @return string
   */
  public function getObjectId() {
    return $this->object_id;
  }

  /**
   * Set aspect
   *
   * @param string $aspect
   *
   * @return InstagramSubscription
   */
  public function setAspect($aspect) {
    $this->aspect = $aspect;

    return $this;
  }

  /**
   * Get aspect
   *
   * @return string
   */
  public function getAspect() {
    return $this->aspect;
  }

  /**
   * Set callbackUrl
   *
   * @param string $callbackUrl
   *
   * @return InstagramSubscription
   */
  public function setCallbackUrl($callbackUrl) {
    $this->callback_url = $callbackUrl;

    return $this;
  }

  /**
   * Get callbackUrl
   *
   * @return string
   */
  public function getCallbackUrl() {
    return $this->callback_url;
  }

  /**
   * Set type
   *
   * @param string $type
   *
   * @return InstagramSubscription
   */
  public function setType($type) {
    $this->type = $type;

    return $this;
  }

  /**
   * Get type
   *
   * @return string
   */
  public function getType() {
    return $this->type;
  }

  /**
   * Set user
   *
   * @param \Main\EntityBundle\Entity\User $user
   *
   * @return InstagramSubscription
   */
  public function setUser(\Main\EntityBundle\Entity\User $user = null) {
    $this->user = $user;

    return $this;
  }

  /**
   * Get user
   *
   * @return \Main\EntityBundle\Entity\User
   */
  public function getUser() {
    return $this->user;
  }

}
