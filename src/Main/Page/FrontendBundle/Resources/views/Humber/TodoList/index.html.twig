{% extends 'MainPageFrontendBundle:Default:base-clean.html.twig' %}
{% block stylesheets %}
  {{ parent() }}
  <link href="https://fonts.googleapis.com/css?family=Roboto" rel="stylesheet" type="text/css">
  <link href='http://fonts.googleapis.com/css?family=Droid+Serif:400,700,400italic|Kaushan+Script|Montserrat:400,700' rel='stylesheet' type='text/css'>
  <link href="/libs/twitter-bootstrap/css/bootstrap.min.css" rel="stylesheet" type="text/css"/>
  <style type="text/css">
    body > div.container > div.row > div.col-md-8{
      padding-bottom: 65px;
    }
    #to-do-list-title{
      text-align: center;
      font-family: "Kaushan Script","Helvetica Neue",Helvetica,Arial,cursive;
    }
    #authorize-button{
      margin-top: 65px; 
    }
    #tasks{
      list-style-type: none;
      margin: 0;
      padding: 0;
    }
    #tasks > li{
      width: 100%;
      height: 50px;
      max-height: 50px;
      background-color: #E6E6E6;
      margin-bottom: 10px;
      padding: 0 15px; 
      padding-top: 15px; 
      box-shadow: 0 7px 0 -4px rgba(0, 0, 0, 0.2); 
    }
    #user-img{
      height: 40px;
      margin-right: 10px;
      margin-top: -10px;
      position: relative;
    }
    .task-nav{
      margin-top: -10px;
    }
    .task-nav li {
      margin: 10px 0;
    }
    .task-nav li a{
      margin-top: -10px;
    }
    .legend-btn{
      margin-right: 25px;
    }
    /*OVERRIDE COLORS*/
    .list-group-item-info {
      color: #31708f !important;
      background-color: #d9edf7 !important;
    }
    .list-group-item-danger {
      color: #a94442 !important;
      background-color: #f2dede !important;
    }
    .list-group-item-warning {
      color: #8a6d3b !important;
      background-color: #fcf8e3 !important;
    }
    .btn-warning {
      color: #fff !important;
      background-color: #f0ad4e !important;
      border-color: #eea236 !important;
    }
    #messageNewTask{
      width: 80%;
      height: 50px;
      border: none;
      background-color: transparent;
      font-size: 20px;
      font-weight: 300;
      float: left;
      padding: 5px 10px;
      -webkit-transition: all .3s ease;
      -o-transition: all .3s ease;
      transition: all .3s ease;
      background-color: rgba(0,0,0,.15);
      outline: 1px solid transparent;
    }
    #createNewTask{
      outline: 1px solid transparent;
      height: 50px;
      width: 20%;
      padding: 10px;
      text-align: center;
      background-color: rgba(0,0,0,.25);
      border: 0;
      border-left: 0;
      color: white;
      cursor: pointer;
      padding: 0;
      vertical-align: bottom;
      font: 300 18px "Lato", "Arial", sans-serif;
    }

    /*GOOGLE OFFICIAL BUTTON https://developers.google.com/+/web/signin/customize */
    #customBtn {
      display: inline-block;
      background: #dd4b39;
      color: white;
      width: 165px;
      border-radius: 5px;
      white-space: nowrap;
    }
    #customBtn:hover {
      background: #e74b37;
      cursor: hand;
    }
    span.label-google {
      font-weight: bold;
    }
    span.icon-google {
      background: url('/img/btn_red_32.png') transparent 5px 50% no-repeat;
      display: inline-block;
      vertical-align: middle;
      width: 40px;
      height: 35px;
      margin-left: -12px;
      border-right: #bb3f30 1px solid;
    }
    span.buttonText {
      display: inline-block;
      vertical-align: middle;
      padding-left: 35px;
      padding-right: 35px;
      font-size: 14px;
      font-weight: bold;
      /* Use the Roboto font that is loaded in the <head> */
      font-family: 'Roboto',arial,sans-serif;
    }
    #gSignInWrapper{
      text-align: center;
    }
    .customGPlusSignIn{
      cursor: pointer;
    }
  </style>
  <link href="/libs/animate.css/animate.css" rel="stylesheet" type="text/css"/>
{% endblock stylesheets %}
{% block body %}

  <div class="container">
    <div class="row">
      <div class="col-md-8 col-md-offset-2">
        <h2 id="to-do-list-title">
          - To Do List -
        </h2>
        <div id="authorize-button" >
          <div id="gSignInWrapper" >
            <span class="label-google">Sign in with:</span>
            <div id="customBtn" class="customGPlusSignIn" onclick="handleAuthClick()">
              <span class="icon-google"></span>
              <span class="buttonText">Google</span>
            </div>
          </div>
        </div>
        <div id="content" class="hidden">
          <div class="clearfix" style="padding-left: 8px; margin-bottom: 8px;">
            <div id='user-info' class="pull-left"></div>
            <div class="pull-right legend-btn">
              <button id="clearCompletadTasks" title="clear completed tasks" type="button" data-placement="right" class="btn btn-warning btn-xs tool-tip" data-toggle="modal" data-target="#clearCompletadTasksModal">
                <span class="glyphicon glyphicon-fire"></span>
              </button>
            </div>
          </div>
          <div style="margin-bottom: 15px;">
            <input id="messageNewTask" type="text"  placeholder="your new task message">
            <button id="createNewTask" type="button" >Save</button>
          </div>
          <ul id="tasks">

          </ul>
          <a id="signout" class="btn btn-danger pull-right" href="https://www.google.com/accounts/Logout?continue=https://appengine.google.com/_ah/logout?continue={{ url('samples_to_do_list') }}">Sign out</a>
        </div>
      </div>
    </div>
  </div>
  <footer>
    <nav class="navbar navbar-inverse navbar-fixed-bottom" role="navigation">
      <div class="container">
        <div class="row">
          <div class="col-md-12">
            <p class="navbar-text">Google Plus API and Tasks API.</p>
          </div>
        </div>
      </div>
    </nav>
  </footer>

  <!-- Modal -->
  <div class="modal fade" id="clearCompletadTasksModal" tabindex="-1" role="dialog" aria-labelledby="clearCompletadTasksModal" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
          <h4 class="modal-title text-danger" id="myModalLabel">Clear completed tasks from the list</h4>
        </div>
        <div class="modal-body">
          <p class="">
            This action will <strong class="text-danger"> PERMANENTLY DELETE </strong> all tasks 
            marked has <span class="label label-info">Completed</span>.
          </p>
          <p class="">
            Are you sure that you wish to continue ?
          </p>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-default" data-dismiss="modal">cancel</button>
          <button id="pemanectDeleteCompletedTasks" type="button" class="btn btn-danger ">Delete all completed tasks</button>
        </div>
      </div>
    </div>
  </div>
  <div id="task-model" class="list-group hidden">
    <li class="">
      <span class="task-text">Random text to demostrate how it looks</span>
      <ul class="nav nav-pills pull-right task-nav">
        <li class="task-mark-as-completed tool-tip" title="mark as completed" data-toggle="tooltip" data-placement="right" >
          <a href="#">
            <span class="glyphicon glyphicon-check"></span>
          </a>
        </li>
        <li class="task-completed hidden">
          <span class="label label-info">Completed</span>
        </li>
        <li class="task-mark-as-uncompleted hidden">
          <a href="#">
            <span class="glyphicon glyphicon-share"></span>
          </a>
        </li>
      </ul>
    </li>
  </div>
{% endblock body %}
{% block javascripts %}
  {{ parent() }}
  <script src="/libs/jquery/jquery.min.js" type="text/javascript"></script>
  <script src="/libs/twitter-bootstrap/js/bootstrap.min.js" type="text/javascript"></script>
  <script type="text/javascript">
    var lists = null;
    var listScoped = null;
    var tasks = [];
    var taskScoped = null;

    $(document).on('click', '#pemanectDeleteCompletedTasks', function () {
      deleteCompletedTasks();
    });
    function deleteCompletedTasks() {
      if (!$('#pemanectDeleteCompletedTasks').hasClass('btn-warning')) {
        $('#pemanectDeleteCompletedTasks').removeClass('btn-danger');
        $('#pemanectDeleteCompletedTasks').addClass('btn-warning');
        gapi.client.load('tasks', 'v1', function () {
          var request = gapi.client.tasks.tasks.clear({
            tasklist: listScoped.id
          });
          request.execute(function (resp) {
            console.log(resp);
            $('#clearCompletadTasksModal').modal('hide');
            $('.list-group-item-info').remove();
          });
        });
      }
    }
    $('#clearCompletadTasksModal').on('hidden.bs.modal', function (e) {
      $('#pemanectDeleteCompletedTasks').removeClass('btn-warning');
      $('#pemanectDeleteCompletedTasks').addClass('btn-danger');
    });

    $(document).on('click', '#createNewTask', function () {
      createTask();
    });

    function createTask() {
      if (!$('#createNewTask').hasClass('btn-warning')) {
        $('#createNewTask').addClass('btn-warning');
        gapi.client.load('tasks', 'v1', function () {
          var request = gapi.client.tasks.tasks.insert({
            tasklist: listScoped.id,
            title: $('#messageNewTask').val()
          });
          request.execute(function (resp) {
            console.log(resp);
            $item = createLiTask(resp.id, resp.title);
            markAsUncompleted($item);
            $('#tasks').prepend($item);
            $('#createNewTask').removeClass('btn-warning');
            $('#messageNewTask').val('');
          });
        });
      }
    }

    $(document).on('click', '.task-mark-as-completed', function () {
      changeStatus($(this).closest('li[task-id]'), 'completed');
    });
    $(document).on('click', '.task-mark-as-uncompleted', function () {
      changeStatus($(this).closest('li[task-id]'), 'needsAction');
    });
    function changeStatus($item, status) {
      if (!$item.hasClass('list-group-item-warning')) {
        $item.addClass('list-group-item-warning');
        gapi.client.load('tasks', 'v1', function () {
          var request = gapi.client.tasks.tasks.update({
            tasklist: listScoped.id,
            task: $item.attr('task-id'),
            id: $item.attr('task-id'),
            status: status
          });
          request.execute(function (resp) {
            console.log(resp);
            if (resp.code == 400) {
              $item.removeClass('list-group-item-warning');
              $item.addClass('list-group-item-danger');
            } else {
              $item.addClass('fadeOutLeft animated changeStatus go-out');
              animationEnds($item);
              if (status === 'completed') {
                $item.addClass('completed');
              }
            }
          });
        });
      }
    }

    function markInitialState($item) {
      $item.removeClass('list-group-item-danger');
      $item.removeClass('list-group-item-warning');
      $item.removeClass('list-group-item-info');
      $item.find('.task-mark-as-completed').addClass('hidden');
      $item.find('.task-mark-as-uncompleted').addClass('hidden');
      $item.find('.task-completed').addClass('hidden');
    }
    function markAsUncompleted($item) {
      markInitialState($item);
      $item.find('.task-mark-as-completed').removeClass('hidden');
    }
    function markAsCompleted($item) {
      markInitialState($item);
      $item.find('.task-completed').removeClass('hidden');
      $item.find('.task-mark-as-uncompleted').removeClass('hidden');
      $item.addClass('list-group-item-info');
    }

    function createLiTask(id, title) {
      var $item = $('#task-model>li').clone();
      $item.attr('task-id', id);
      $item.find('.task-text').html(title);
      $item.addClass('fadeInLeft animated');
      animationEnds($item);

      return $item;
    }
    function getTasks() {
      $('#tasks').html(' ');
      gapi.client.load('tasks', 'v1', function () {
        var request = gapi.client.tasks.tasks.list({
          tasklist: listScoped.id
        });
        request.execute(function (resp) {
          console.log(resp);
          tasks = resp.items;
          $.each(tasks, function (index, value) {
            $item = createLiTask(value.id, value.title);
            if (value.status === "completed") {
              markAsCompleted($item);
              $('#tasks').append($item);
            } else {
              markAsUncompleted($item);
              $('#tasks').prepend($item);
            }
          });
        });
      });
    }
    function getLists() {
      gapi.client.load('tasks', 'v1', function () {
        var request = gapi.client.tasks.tasklists.list();
        request.execute(function (resp) {
          console.log(resp);
          if (resp.items.length > 0) {
            lists = resp.items;
            listScoped = lists[0];
          }
          getTasks();
        });
      });
    }
    /* --- INITIAL API CALLS ---*/
    /* --- INITIAL API CALLS ---*/
    /* --- INITIAL API CALLS ---*/
    var clientId = '821300934846-ovdqbnqpvf2va5r78j6743iktvnnc72c.apps.googleusercontent.com';
    var apiKey = 'AIzaSyB75AdRRleGBkP-YIrX6GIJWiR-hkRzFVk';
    var scopes = ['https://www.googleapis.com/auth/tasks', 'https://www.googleapis.com/auth/plus.me'];
    function handleClientLoad() {
      gapi.client.setApiKey(apiKey);
    }
    function handleAuthResult(authResult) {
      console.log(authResult);
      var authorizeButton = document.getElementById('authorize-button');
      if (authResult && !authResult.error) {
        authorizeButton.remove();
        getNameAndImageFromGooglePlus();
      } else {
        authorizeButton.onclick = handleAuthClick;
      }
    }
    function handleAuthClick(event) {
      gapi.auth.authorize({client_id: clientId, scope: scopes, immediate: false}, handleAuthResult);
      return false;
    }
    function getNameAndImageFromGooglePlus() {
      gapi.client.load('plus', 'v1', function () {
        var request = gapi.client.plus.people.get({
          'userId': 'me'
        });
        request.execute(function (resp) {
          console.log(resp);
          var image = $('<img />');
          image.attr('id', 'user-img');
          image.attr('src', resp.image.url);
          image.addClass('img-circle');
          $('#user-info').append(image);
          $('#user-info').append(resp.displayName);
          $('#content').hide().removeClass('hidden').show();
          getLists();
        });
      });
    }
    /*MANAGE ANIMATION*/
    function animationEnds($item) {
      $item.one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', animationManager);
    }
    function animationManager() {
      $(this).removeClass('animated');
      $(this).removeClass('fadeInLeft');
      $(this).removeClass('fadeOutLeft');
      if ($(this).hasClass('changeStatus')) {
        if ($(this).hasClass('go-out')) {
          $(this).removeClass('go-out');
          $(this).addClass('fadeInLeft animated changeStatus go-in');
          if ($(this).hasClass('completed')) {
            $(this).removeClass('completed');
            markAsCompleted($(this));
            $('#tasks').append($(this));
          } else {
            markAsUncompleted($(this));
            $('#tasks').prepend($(this));
          }
          animationEnds($(this));
        } else {
          $(this).removeClass('go-in');
          $(this).removeClass('changeStatus');
        }
      }
    }

  </script>
  <script src="https://apis.google.com/js/client.js?onload=handleClientLoad"></script>
{% endblock javascripts %}
