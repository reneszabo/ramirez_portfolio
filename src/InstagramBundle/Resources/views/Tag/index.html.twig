{% extends 'InstagramBundle:Default:base.html.twig' %}
{% block stylesheets %}
  <link href="/libs/jquery-ui/jquery-ui.min.css" rel="stylesheet" type="text/css"/>
  {{ parent() }}
  <style type="text/css">
    .navbar-brand{
      font-size: 200%;
    }
    .text-center img{
      display: inline-block;
    }
    #content > .row > div {
      padding-top: 16px;
      padding-bottom: 16px;
    }
    #instagram-feed {
      box-shadow: inset 1px 0 0 rgba(0,0,0,.05),inset -1px 0 0 rgba(0,0,0,.05);
      background: #e0e1e2 url("/img/noise-2.png");
      border: 1px solid rgba(0,0,0,.1);
      border-width: 0 1px;
      padding: 16px 32px;
    }
    .caption_text{
      word-wrap: break-word; 
    }
    #instagram-race{
      padding: 16px 32px;
    }
    .img-profile-ranking{
      padding-top: 15px;
      padding-left: 10px;
    }
    .item-for-image{
      width: 100%;
    }
    h3#instagram-waiting-to-show {
      margin: 0;
      margin-bottom: 15px;
    }
    body > nav.navbar{
      margin-bottom: 0;
    }
  </style>
{% endblock stylesheets %}
{% block body %}
  <nav class="navbar navbar-default">
    <div class="container-fluid">
      <div class="navbar-header">
        <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
          <span class="sr-only">Toggle navigation</span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
        </button>
        <a class="navbar-brand" href="#"><strong>#{{tagName}}</strong></a>
      </div>
      <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
        <ul class="nav navbar-nav">
        </ul>
        <ul class="nav navbar-nav navbar-right">
          <li><a class="download-modal" href="#download" data-toggle="modal" data-target="#download-modal">Download</a></li>
          <li><a class="switchHD" href="#hd">Turn on HD Image</a></li>
          <li><a class="ajaxRanking" href="#ranking">Turn on Rankings</a></li>
          <li><a class="ajax" href="{{path('instagram_subscription',{'type':'tag','query': tagName})}}">Turn on Live</a></li>
          <li><a  href="{{path('instagram_homepage')}}">Back</a></li>
        </ul>
      </div><!-- /.navbar-collapse -->
    </div><!-- /.container-fluid -->
  </nav>


  <div id="content" class="container-fluid">
    <div class="row">
      <div class="col-md-3">
        <div id="instagram-ranking" class="hidden">
          <legend>
            Ranking - Top 10
            <div class="pull-right">
              <button type="button" class="btn btn-default btn-xs" data-toggle="modal" data-target="#rank-search">
                <i class="fa fa-search"></i>
              </button>
            </div>
          </legend>
          <div id="instagram-ranking-countainer">
          </div>
        </div>
      </div>
      <div id="instagram-feed" class="col-md-6">
        <h3 id="instagram-waiting-to-show" class="text-center hidden">
          <span id="instagram-count" class="label label-info">+100</span>
        </h3>
        <div id="instagram-timeline">
          {% for tag in tags %}
            {% include 'InstagramBundle:Tag:media.html.twig' with {'tag':tag} %}
          {% endfor %}
        </div>

      </div>
      <div class="col-md-3">
        {#<div class="well">
                    ASIDE RIGHT
        </div>#}

      </div>
    </div>
  </div>
  <div class="hidden">
    {% include 'InstagramBundle:Tag:media.html.twig' %}
    {% include 'InstagramBundle:Tag:rank_card.html.twig' %}
    <div id="hide-list">

    </div>
  </div>



  <div id="download-modal" class="modal fade" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
          <h4 class="modal-title">Download Manager</h4>
        </div>
        <div class="modal-body">
          <div class="bs-callout bs-callout-info" id="callout-glyphicons-location">
            <h4>Friendly reminder</h4>
            <p>Download my take a while, depending on:</p>
            <ul>
              <li>Number of images to zip</li>
              <li>Velocity of the internet</li>
              <li>Velocity of the PC, Laptop or Mobile</li>
              <li><b>If the progress bar freezes</b> please give it a time of 5 minuts before canceling or refreshing the page.</li>
              <li>If this modal windows closes the operation will be <span class="label label-danger">canceled</span></li>
            </ul>
            <p>Download needs a date range. If not set it will prompt by its self or change it with <button type="button" class="btn btn-default btn-xs" data-toggle="modal" data-target="#rank-search"><i class="fa fa-search"></i></button></p>
            <p>It may zip more images that the counter, margin of error is between 20 and 40 images more.</p>
          </div>

          <div class="clearfix">
            <div class="progress">
              <div id="download-progressbar" class="progress-bar" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 100%;">
                <span id="imagesZiped">0</span>/<span id="imagesToZip">0</span>
              </div>
            </div>

            <button id="download" class="btn btn-info btn-block">Start Download</button>
            <div class="text-center">
              <span id="wait-message" class="label label-warning hide">Please wait. Zip file comming up.</span>
            </div>
          </div>
        </div>
      </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
  </div><!-- /.modal -->

  <div id="rank-search" class="modal fade">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
          <h4 class="modal-title">Date search</h4>
        </div>
        <div class="modal-body">
          <div class="clearfix">
            {{ form_start(form) }}
            {{ form_rest(form) }}
            {{ form_end(form) }}
          </div>
          <div class="bs-callout bs-callout-info" id="callout-glyphicons-location">
            <h4>Friendly reminder</h4>
            <p>Instagram does not provide date search periods. Therefore, all images on the period of time selected are from the user of the feature LIVE FEED on this website.</p>
            <p>The best result of this feature you should have meet: </p>
            <ul>
              <li>Turn on <b>LIVE FEED</b> prior or during the date range period</li>
              <li>Request per hour limit shared among all users: <span class="label label-warning">5000/hour</span> </li>
              <li>Please <b>avoid popular tags</b> that can consume the request per hour limits</li>
              <li><b>In case of logout</b> and resume in other day, but still want images to be recorded, verify in <strong><a class="bold" href="{{ path('instagram_subscription_list') }}">SUBSCRIPTION LIST</a></strong> that your #HashTag is in the list, and then you can leave the website. With this, you can leave the website and resume another day, and the period of time you were off line, the server will record the images on his own.</li>
            </ul>
            <p>Use whatever option best suits your specific.</p>
          </div>
        </div>
      </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
  </div><!-- /.modal -->




{% endblock body %}
{% block javascripts %}
  {{ parent() }}
  <script src="/libs/jquery-ui/jquery-ui.min.js" type="text/javascript"></script>
  <script src="http://autobahn.s3.amazonaws.com/js/autobahn.min.js"></script>
  <script src="/libs/blob/Blob.js" type="text/javascript"></script>
  <script src="/libs/file-server/FileSaver.min.js" type="text/javascript"></script>
  <script src="/libs/jszip/jszip.min.js" type="text/javascript"></script>
  <script type="text/javascript">
    var zip;
    var imgFolder;
    var imagesRecived = 0;
    var imagesDone = 0;
    var imagesData = null;
    var downloadOpen = false;
    var numberImagesZiped = 0;
    var pageIn = 0;

    $('#rank-search').on('hidden.bs.modal', function (e) {
      if (downloadOpen === true) {
        manageImageDownload(0);
      }
    });
    $('#download-modal').on('hidden.bs.modal', function (e) {
      $('#download').removeClass('disabled');
      $('#wait-message').addClass('hide');
      downloadOpen = false;
    });
    $('#download-modal').on('shown.bs.modal', function (e) {
      $('#download').removeClass('disabled');
      $('#wait-message').addClass('hide');
      downloadOpen = true;
      zip = new JSZip();
      imgFolder = zip.folder("images");
      numberImagesZiped = 0;
      $('#download-progressbar').attr('aria-valuenow', 0);
      $('#download-progressbar').attr('aria-valuemin', 0);
      $('#download-progressbar').attr('aria-valuemax', 0);
      $('#download-progressbar').css('width', '0%');
      $('#imagesZiped').html(0);
      $('#imagesToZip').html(0);
    });


    $(document).on('click', '#download', function () {
      if (!$('#download').hasClass('disabled')) {
        if (isFormReady()) {
          manageImageDownload(0);
        } else {
          $('#rank-search').modal('show');
        }
      }
    });

    function manageImageDownload(page) {
      $('#download').addClass('disabled');
      if (downloadOpen === true) {
        var formData = getFormSerialize();
        formData.push({page: page});
        imagesRecived = 0;
        imagesDone = 0;
        imagesData = null;
        pageIn = page;
        var url = "{{path('instagram_tag_images',{'query':tagName })}}" + "/" + page;
        console.log(url);
        $.ajax({
          url: url,
          data: formData,
          method: 'POST',
          dataType: 'json',
          error: function (jqXHR, textStatus, errorThrown) {
            console.log('ERROR', jqXHR, textStatus, errorThrown)
            manageImageDownload(pageIn);
          },
          success: function (data, textStatus, jqXHR) {
            console.log(data);
            data = jQuery.parseJSON(data);
            imagesRecived = data.data.length;
            imagesData = data;
            data.data.forEach(getImageData);
            $('#download-progressbar').attr('aria-valuemin', 0);
            $('#download-progressbar').attr('aria-valuemax', imagesData.total);
            $('#imagesToZip').html(imagesData.total);
          }
        });
      }
    }

    function getImageData(element, index, array) {
      console.log(element.images.standard_resolution.url);
      convertImgToBase64(element.images.standard_resolution.url, addToZip, 'image/jpeg', element.user.username + '_' + element.createdTime + '.jpg');
    }

    function addToZip(data, name, pass) {
      if (pass) {
        console.log(name);
        imgFolder.file(name, data.substring(data.indexOf(",") + 1).trim(), {base64: true});
      }
      numberImagesZiped++;
    {# if (numberImagesZiped > imagesData.total) {
       numberImagesZiped = imagesData.total * 1;
     }#}
         imagesDone++;
         $('#download-progressbar').attr('aria-valuenow', numberImagesZiped);
         $('#download-progressbar').css('width', (numberImagesZiped * 100 / imagesData.total) + '%');
         $('#imagesZiped').html(numberImagesZiped);
         if (imagesDone === imagesRecived) {
           console.log("NEXT", imagesData.next_page, imagesData.pages, imagesData.total);
           if (imagesData.next_page !== undefined || imagesData.next_page != null) {
             if ((imagesData.next_page + 2) >= imagesData.pages) {
               $('#wait-message').removeClass('hide');
             }
             manageImageDownload(imagesData.next_page);
           } else {
             endZip();
           }
         }
       }

       function endZip() {

         var content = zip.generate({type: "blob"});
         saveAs(content, "Instagram.zip");
         $('#download-modal').modal('hide');
       }
       function convertImgToBase64(url, callback, outputFormat, name) {
         var img = new Image();
         img.crossOrigin = 'Anonymous';
         img.onload = function () {

           var canvas = document.createElement('CANVAS');
           var ctx = canvas.getContext('2d');
           canvas.height = this.height;
           canvas.width = this.width;
           ctx.drawImage(this, 0, 0);
           var dataURL = canvas.toDataURL(outputFormat || 'image/png');
           callback(dataURL, name, true);
           canvas = null;
         };
         img.onerror = function () {
           console.log('ERROR');
           callback(0, name, false);
         }
         img.src = url;

       }

       var conn = null;
       var ranking = false;
       var hd = false;
       function pushLive() {
         if ($('#hide-list .item-for').length > 0) {
           $obj = $('#hide-list .item-for:first-child');
           $obj.hide();
           if (true) {
             $('#instagram-timeline').prepend($obj);
             $obj.slideDown('fast');
             $('#instagram-timeline .item-for:last-child').remove();
           }
           if ($('#hide-list .item-for').length > 0) {
             $('#instagram-waiting-to-show').removeClass('hidden');
             $('#instagram-count').html("+" + $('#hide-list .item-for').length);
           } else {
             $('#instagram-waiting-to-show').addClass('hidden');
           }
           if (ranking) {
             getRankUsers();
           }
         }
         setTimeout(pushLive, 2000);
       }
       function connectLiveFeed() {
         conn = new ab.Session('{{ ws_url }}',
                 function () {
                   conn.subscribe('tag_{{tagName}}', function (topic, data) {
                     // This is where you would add the new article to the DOM (beyond the scope of this tutorial)
                     data.title.data.forEach(function (element, index, array) {
                       var $obj = $('.item-for-' + element.id);
                       if ($obj.length == 0) {
                         var $objClone = $('#item-for-template').clone();
                         $objClone.attr('id', '');
                         $objClone.addClass('item-for-' + element.id);
                         $('#hide-list').append($objClone);
                         $objClone.find('.item-for-image').attr('image-low', element.images.thumbnail.url);
                         $objClone.find('.item-for-image').attr('image-hd', element.images.standard_resolution.url);
                         if (hd === true) {
                           $objClone.find('.item-for-image').attr('src', element.images.standard_resolution.url);
                         } else {
                           $objClone.find('.item-for-image').attr('src', element.images.thumbnail.url);
                         }
                         $objClone.find('.item-for-image-profile').attr('src', element.user.profile_picture);
                         var user = element.user.full_name + " (" + element.user.username + ")";
                         $objClone.find('.item-for-username').html(user);
                         $objClone.find('.item-for-date').attr('data-time', element.created_time);
                         var myObj = $.parseJSON('{"date_created":"' + element.created_time + '"}'),
                                 myDate = new Date(1000 * myObj.date_created);
                         $objClone.find('.item-for-date').html(myDate.toLocaleString());
                         if (element.caption) {
                           $objClone.find('.item-for-caption').html('<span class="caption_text">' + element.caption.text + '</span>');
                         }

                       }
                     });
                   });
                 },
                 function () {
                   console.warn('WebSocket connection closed');
                 },
                 {'skipSubprotocolCheck': true}
         );

       }
       function closeLiveFeed() {
         conn.close();
         conn = null;
       }
       $(document).on('click', '.ajax', function (e) {
         e.preventDefault();
         if (conn === null) {
           $(this).html('Turn off Live <scpan class="label label-success">LIVE</span>');
           connectLiveFeed();
           var url = $(this).attr('href');
           $.ajax({
             url: url
           });

         } else {
           $(this).html('Turn on Live');
           closeLiveFeed();
         }
       });
       $(document).on('click', '.switchHD', function (e) {
         e.preventDefault();
         if (hd === true) {
           hd = false;
           $(this).html('Turn on HD Images');
           $('.item-for-image').each(function (index, element) {
             $(this).attr('src', $(this).attr('image-low'));
           });
         } else {
           hd = true;
           $('.item-for-image').each(function (index, element) {
             $(this).attr('src', $(this).attr('image-hd'));
           });
           $(this).html('Turn off HD Images <scpan class="label label-success">ON</span>');
         }
       });
       $(document).on('click', '.ajaxRanking', function (e) {
         e.preventDefault();
         if ($('#instagram-ranking').hasClass('hidden')) {
           $('#instagram-ranking').removeClass('hidden');
           ranking = true;
           $(this).html('Turn off Rankings <scpan class="label label-success">ON</span>');
         } else {
           $('#instagram-ranking').addClass('hidden');
           ranking = false;
           $(this).html('Turn on Rankings');
         }
       });


       $(function () {
         if (!JSZip.support.blob) {
           $("#download").hide();
         }
         setTimeout(pushLive, 2000);
         $(".date.from").datepicker({
           dateFormat: 'dd-mm-yy 00:00:00',
           onClose: function (selectedDate) {
             $(".date.to").datepicker("option", "minDate", selectedDate);
           }
         });
         $(".date.to").datepicker({
           defaultDate: "+1w",
           dateFormat: 'dd-mm-yy 23:59:59',
           onClose: function (selectedDate) {
             $("#from").datepicker("option", "maxDate", selectedDate);
           }
         });
       });

       $(document).on('submit', 'form[name=instagram_date_filter]', function (e) {
         e.preventDefault();
         getRankUsers();
         $('#rank-search').modal('hide');
       });
       function getRankUsers() {
         var d = $('form[name=instagram_date_filter]').serialize();
         if (isFormReady()) {
           $.post(
                   $('form[name=instagram_date_filter]').attr('action'),
                   getFormSerialize(),
                   function (data, textStatus, jqXHR) {
                     $('#instagram-ranking-countainer').html(data);
                   }
           );
         } else {
           $('#instagram-ranking-countainer').html('<span class="label label-warning">Please search for a date range</span>');
         }
       }

       function isFormReady() {
         if (($('#instagram_date_filter_created_time_start').val() == "") || ($('#instagram_date_filter_created_time_end').val() == "")) {
           return false;
         } else {
           return true;
         }
       }
       function getFormSerialize() {
         return $('form[name=instagram_date_filter]').serializeArray();
       }

  </script>
{% endblock javascripts %}




